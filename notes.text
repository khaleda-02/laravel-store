useing the env('app') in not configuration files , it's not recommended . 
the env just in config files , 

why -> 
in production we cache the config folder , 
so by that the env will be non available 

what to use to get the env values ->
use config('key:app.name')

video 03.1 40:00
---------------------------------------------------------- Breeze --------------------------------------------------------
- Breeze it's a dev dependency  
- download -> composer require laravel/breeze --dev 
- Usage -> usering artisan : php artisan breeze:install 
- removing -> composer remove laravel/breeze 
- Note : the above command will overwrite the web.php file 

---------------------------------------------------------- Commands --------------------------------------------------------
- php artisan route:list || php artisan r:l -> get all project's routes 
- php artisan db:seed    -> run database Seeds
- php artisan make:request RequestName-> create a custom request 
- php artisan make:rule FilterName -> create a custom rule filter
- php artisan make:seeder CategoriesSeeder -> create seeder file    
- php artisan make:component alert -> create a blade component
- php artisan vendor:publish --tag=laravel-pagination => make a editable copy of the laravel-pagination lib 
---------------------------------------------------------- files structure --------------------------------------------------------
in controllers -> each domain in file | controllers Dashboard CategoryController.php
in views       -> each controller has folder (file for : index , store , create ... ) | views dashboard categories index.blade.php 


** form method must be in ['post', 'get']
** redirect doesn't take route name , just the rout , recommended : Redirect::route(), or we use route(); 
** Request merge  : the property will not be updated , if we tried to merge an exist property into the request , 
** File Uploading Steps : store the files using public disk in the uploads folder , and then create a link for this folder in the public folder 
** isset() : function return true if the var is exist and not null 
---------------------------------------------------------- Custom Validation --------------------------------------------------------
1- in the rules function in model : [
    'name' => [
      'required' ,
      function ($attribute , $value , $fails){
        if($value == "custom") $fails('message );
      } 
    ]
  ] 
    
2- create custom rule using : php artisan make:rule RuleName , and implement the pass function in the class 
3- extend the Validator facade in the appProvider  , in boot funciton 
---------------------------------------------------------- Blade Component --------------------------------------------------------
- with the command : php artisan make:component alert , we can create the component . 
- thee's two types of components : 
    anonyms no class : php artisan make:component alert --view , 
    with a class 
- {{ attributes }} ==> it will pass all attribute from the <x-from.input/> to the component , except the attributes that defined in the @props 
- $slot it's like the children in react 

---------------------------------------------------------- scopes --------------------------------------------------------
- to build a local scope, the name must start with scopeName . and the function take the builder
- there's a built in scopes in laravel : latest('column name') => default based on the created at ,  orderBy('column name','DESC') 
- to create a global scope on a model , implement the booted function , and use addGlobalScope

---------------------------------------------------------- SoftDelete --------------------------------------------------------
- to access the deleted categories : in the select statement pipeline add ->withTrashed()  
- there's also the ->onlyTrashed() , 

---------------------------------------------------------- References --------------------------------------------------------
custom validation messages : 06.1 1:10 
unique 06.1 57
custom rule 06.2


//todo : create a profile for the user , editable 
1- add encytype to product form ,
2- create fillable for product
3- 
4- 
5- 
6- 
7- 

// To learn 
1- model relations 
2- facade in laravel 

